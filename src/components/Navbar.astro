---
import { getRelativeLocaleUrl } from 'astro:i18n'

import NavbarLinksMobile from '@/components/NavbarLinksMobile.astro'
import NavbarLinks from '@/components/NavbarLinks.astro'

import { getI18N } from '@/i18n'

const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })
const {
  pages: { index }
} = i18n
---

<header
  id="navbar"
  class="sticky top-0 z-50 min-h-[57px] px-4 pb-2 pt-3 backdrop-blur-md sm:px-12 md:px-16 xl:px-0"
>
  <div class="mx-auto flex max-w-5xl items-center justify-between">
    <a
      href={getRelativeLocaleUrl(`${currentLocale}`)}
      class="flex items-center justify-center gap-2 p-2"
    >
      <img
        src="/icon-smaller.webp"
        class="rounded-full"
        width="36"
        height="36"
        alt="my icon"
        fetchpriority="high"
        decoding="async"
      />
      <div class="font-roboto text-xs font-semibold text-gray-400">
        <h1>Frank Contreras</h1>
        <p>Front-End Developer</p>
      </div>
    </a>

    <nav>
      <NavbarLinksMobile links={index.navbarLinks} />
      <NavbarLinks links={index.navbarLinks} />
    </nav>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('section')
    const navLinks = document.querySelectorAll(
      'header nav ul li a'
    ) as NodeListOf<HTMLElement>

    const callback: IntersectionObserverCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navLinks.forEach((link) => {
            if (link.getAttribute('aria-label') == entry.target.id) {
              link.classList.add('text-emerald-300')
              link.classList.replace('after:scale-x-0', 'after:scale-x-100')
            } else {
              link.classList.remove('text-emerald-300')
              link.classList.replace('after:scale-x-100', 'after:scale-x-0')
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.4
    })

    sections.forEach((section) => observer.observe(section))

    document.onvisibilitychange = () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>
